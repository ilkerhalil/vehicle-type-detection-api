[tool.pytest.ini_options]
# Pytest configuration for Vehicle Type Detection API

minversion = "7.0"
testpaths = [
    "tests",
    "vehicle_type_detection_api/tests"
]

# Test discovery patterns
python_files = [
    "test_*.py",
    "*_test.py"
]

python_classes = [
    "Test*",
    "*Test"
]

python_functions = [
    "test_*"
]

# Add options
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=vehicle_type_detection",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--asyncio-mode=auto"
]

# Markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "adapter: marks tests as adapter tests",
    "service: marks tests as service tests",
    "model: marks tests as model-related tests",
    "pytorch: marks tests that require PyTorch",
    "onnx: marks tests that require ONNX",
    "openvino: marks tests that require OpenVINO",
    "gpu: marks tests that require GPU",
    "cpu: marks tests that run on CPU only"
]

# Filter warnings
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning",
    # Specific library warnings
    "ignore::torch.jit._trace:UserWarning",
    "ignore::ultralytics.*:UserWarning",
    "ignore::openvino.*:DeprecationWarning"
]

# Asyncio configuration
asyncio_mode = "auto"

# Log configuration
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Test timeout
timeout = 300

# Parallel execution
# Uncomment if you have pytest-xdist installed
# addopts = ... -n auto

# JUnit XML output
junit_suite_name = "vehicle_detection_api_tests"

# Coverage configuration
[tool.coverage.run]
source = [
    "vehicle_type_detection_api/src",
    "vehicle_type_detection_api"
]

omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
    "conftest.py"
]

branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

ignore_errors = true
skip_covered = false
skip_empty = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"