[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vehicle-type-detection-api"
version = "2.0.0"
description = "FastAPI application for vehicle type detection using AI model with Hexagonal Architecture"
readme = "README.md"
authors = [
    {name = "Vehicle Detection Team", email = "ilkerhalil@gmail.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "fastapi>=0.116.0",
    "uvicorn[standard]>=0.30.0",
    "python-multipart>=0.0.9",
    "opencv-python>=4.10.0",
    "opencv-python>=4.10.0",
    "numpy>=1.26.0",
    "pillow>=10.4.0",
    "complexipy>=4.0.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.1.0",
    "mypy>=1.11.0",
    "pre-commit>=3.8.0",
    "httpx>=0.27.0",
]

[project.urls]
Homepage = "https://github.com/ilkerhalil/vehicle-type-detection-api"
Documentation = "https://github.com/ilkerhalil/vehicle-type-detection-api#readme"
Repository = "https://github.com/ilkerhalil/vehicle-type-detection-api.git"
Issues = "https://github.com/ilkerhalil/vehicle-type-detection-api/issues"

[project.scripts]
vehicle-type-detection-api = "vehicle_type_detection.main:main"

[tool.setuptools.packages.find]
where = ["vehicle_type_detection_api/src"]
include = ["*"]

[tool.setuptools.package-dir]
"" = "vehicle_type_detection_api/src"

# Black code formatting
[tool.black]
line-length = 120
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["vehicle_type_detection_api/src", "vehicle_type_detection_api/tests"]

# Flake8 linting
[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

# MyPy type checking
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "PIL.*",
]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "vehicle_type_detection_api/tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["vehicle_type_detection_api/src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
